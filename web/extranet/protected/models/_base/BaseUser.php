<?php

/**
 * This is the model base class for the table "user".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "User".
 *
 * Columns in table "user" available as properties of the model,
 * followed by relations of table "user" available as properties of the model.
 *
 * @property integer $idUser
 * @property integer $idTenant
 * @property integer $idUserGroup
 * @property string $createDate
 * @property string $updateDate
 * @property string $firstName
 * @property string $lastName
 * @property string $email
 * @property string $password
 * @property string $active
 *
 * @property UserGroup $userGroup
 * @property Tenant $tenant
 */
abstract class BaseUser extends GxActiveRecord {
	
    public $name;
	public $password_confirm;
	public $password_current;
	
        
	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'user';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'Usuário|Usuários', $n);
	}

	public static function representingColumn() {
		return array('firstName','lastName');
	}

	public function rules() {
		return array(
			array('idUserGroup', 'required'),
			array('idTenant, idUserGroup', 'numerical', 'integerOnly'=>true),
			array('firstName, lastName, email, password', 'length', 'max'=>100),
			array('active', 'length', 'max'=>1),
			array('createDate, updateDate', 'safe'),
			
			array('email','email'),
			array('firstName, lastName, email','required','on'=>'me'),
			
			array('password','compare', 'compareAttribute'=>'password_confirm', 'message'=> Yii::t('app','As senhas informadas são diferentes')),
			
			array('password_current','validateCurrentPassword','on'=>'me'),
			array('password_current','required','on'=>'password','on'=>'me'),
			array('password,password_confirm','required'),
			
			array('createDate, updateDate, firstName, lastName, email, password, active', 'default', 'setOnEmpty' => true, 'value' => null),
			array('idUser, idTenant, idUserGroup, createDate, updateDate, firstName, lastName, email, password, active', 'safe', 'on'=>'search'),
		);
	}
	
	public function validateCurrentPassword(){
		$crypto_password_current = $this->cryptoSenha($this->password_current);
		$crypto_password = Yii::app()->user->obj->password;
		
		if($crypto_password_current != $crypto_password){
			$this->addError('',Yii::t('app','Senha atual incorreta'));
		}
		
	}

	public function relations() {
		return array(
			'group' => array(self::BELONGS_TO, 'UserGroup', 'idUserGroup'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'idUser' => Yii::t('app', 'Id User'),
			'idUserGroup' => Yii::t('app', 'Grupo'),
			'createDate' => Yii::t('app', 'Data de criação'),
			'updateDate' => Yii::t('app', 'Data de atualização'),
			'firstName' => Yii::t('app', 'Nome'),
			'lastName' => Yii::t('app', 'Sobrenome'),
			'email' => Yii::t('app', 'E-mail'),
			'password' => Yii::t('app', 'Senha'),
			'password_confirm' => Yii::t('app', 'Confirme a senha'),
			'password_current' => Yii::t('app', 'Senha atual'),
			'active' => Yii::t('app', 'Ativo'),
			'userGroup' => null,
			'tenant' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('idUser', $this->idUser);
		$criteria->compare('idTenant', $this->idTenant);
		$criteria->compare('idUserGroup', $this->idUserGroup);
		$criteria->compare('createDate', $this->createDate, true);
		$criteria->compare('updateDate', $this->updateDate, true);
		$criteria->compare('firstName', $this->firstName, true);
		$criteria->compare('lastName', $this->lastName, true);
		$criteria->compare('email', $this->email, true);
		$criteria->compare('password', $this->password, true);
		$criteria->compare('active', $this->active, true);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}